#### O primeiro appender escreve no console
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

### Pattern que mostra o nome do arquivo e numero da linha, porem #sem data e hora
#log4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n

### Pattern que mostra o nome do arquivo e numero da linha, com data e hora
log4j.appender.stdout.layout.conversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p - %m%n

log4j.appender.stdout.Target=System.out

log4j.rootLogger=info, stdout

# basic log level for all messages
log4j.logger.org.hibernate=WARN

# SQL statements and parameters
log4j.logger.org.hibernate.SQL=DEBUG  
log4j.logger.org.hibernate.type=trace

### log JDBC bind parameters. Very userfull, when debug parameterized queries ###  
log4j.logger.org.hibernate.type=TRACE  
log4j.logger.org.hibernate.type.descriptor.sql.BasicBinder=trace

#### Usando 2 appenders, 1 para logar no console, outro para um #arquivo, 
#### ou seja, mostrará o log no console e salvará em um arquivo
# log4j.rootCategory=WARN,stdout,fileOut

# Imprime somente mensagens com 'priority' WARN ou mais alto para o #logger
#lembrando a ordem: DEBUG - INFO - WARN - ERROR - FATAL
log4j.category.psc.jpa.daos=DEBUG

#### O segundo appender escreve em um arquivo e faz um bkp ao #atingir o max 
#log4j.appender.fileOut =org.apache.log4j.RollingFileAppender
#log4j.appender.fileOut.File=meulog.log

### Controla o tamanho maximo do arquivo
#log4j.appender.fileOut.MaxFileSize=100KB

### Faz backup dos arquivos de log (apenas 1)
#log4j.appender.fileOut.MaxBackupIndex=1
#log4j.appender.fileOut.layout=org.apache.log4j.PatternLayout

#####este formato esta em ingles: 2011-04-24 e imprime o nro da #linha L

#log4j.appender.fileOut.layout.ConversionPattern=%d [%t] %5p %c:%L - %m%n
####imprime no formato dia/mes/ano 
#log4j.appender.fileOut.layout.ConversionPattern=%-2d{dd/MM/yy HH:mm} [%t] %5p %c:%L - %m%n
